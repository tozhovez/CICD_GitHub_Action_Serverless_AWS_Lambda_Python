{"version":3,"sources":["theme.js","assets/serverless-cloud-text.svg","reportWebVitals.js","api.js","Resource.js","UpdatedAt.js","IncidentDrawer.js","utils.js","Status.js","UpdatesRow.js","Incidents.js","ServiceModal.js","Services.js","components/Collapsible.js","assets/cloud-dots.svg","Login.js","index.js"],"names":["theme","extendTheme","withDefaultProps","defaultProps","size","color","components","shadows","outline","config","initialColorMode","useSystemColorMode","Input","sizes","sm","field","borderRadius","addon","baseStyle","Button","Skeleton","bg","props","colors","gray","brand","styles","global","fontFamily","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","baseURL","window","location","origin","getHeaders","password","storedPassword","localStorage","getItem","parseStoredPassword","JSON","parse","Authorization","apiClient","a","url","body","method","fetch","headers","res","json","ok","Error","message","Resource","path","render","toast","useToast","useState","loadingAdd","setLoadingAdd","loadingDelete","setLoadingDelete","useSWR","data","error","loading","reload","mutate","deleteResource","resourceId","next","title","status","duration","isClosable","addResource","resource","stringify","serviceId","incidentId","relativeTime","require","dayjs","extend","UpdatedAt","updatedAt","createdAt","fontSize","fromNow","IncidentDrawer","selectedIncident","setSelectedIncident","addIncident","deleteIncident","updateDescription","affectedServicesStatus","undefined","incidentStatus","update","setUpdate","useMemo","useEffect","prev","servicesData","services","sort","b","serviceCreatedAt","useDisclosure","isDrawerOpen","isOpen","onDrawerOpen","onOpen","onDrawerClose","onClose","isAlertOpen","onAlertOpen","onAlertClose","addUpdateNext","deleteIncidentNext","handleDrawerClose","handleSaveIncident","placement","colorScheme","borderBottomWidth","margin","incidentName","spacing","id","placeholder","type","value","onChange","e","target","onKeyUp","event","key","incidentDescription","templateColumns","gap","map","service","isChecked","affectedServicesIds","find","checked","filter","serviceName","width","p","shadow","borderWidth","justifyContent","isLoading","onClick","updates","updateCreatedAt","updateUpdatedAt","updateId","Delete","marginLeft","cursor","borderTopWidth","leftIcon","mr","fontWeight","as","ml","getStatusColor","num","green","yellow","orange","blue","red","Status","useTheme","height","style","background","marginRight","UpdatesRow","incident","borderLeftWidth","borderLeftColor","transform","paddingLeft","marginBottom","position","left","top","backgroundColor","Incidents","filterIncidents","setFilterIncidents","useLocalStorage","isLoggedIn","mt","maxW","alignItems","startColor","endColor","incidents","incidentCreatedAt","css","transition","minH","flex","incidentUpdatedAt","includes","ServiceModal","selectedService","setSelectedService","addService","deleteService","isModalOpen","onModalOpen","onModalClose","deleteServiceNext","handleModalClose","addServiceNext","handleSaveService","serviceStatus","serviceDescription","ServiceStatus","Services","filterServices","setFilterServices","serviceUpdatedAt","Collapsible","forwardRef","outerRef","collapsed","ref","useRef","setHeight","useLayoutEffect","current","scrollHeight","createElement","overflow","display","gridTemplateColumns","Login","setStoredPassword","setPassword","setloading","errorMessage","setErrorMessage","login","href","src","CloudDots","alt","h","ServerlessCloudLogo","maxWidth","App","activePage","setActivePage","minHeight","removeItem","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ab0ffaf.chunk.js","sourcesContent":["import { extendTheme, withDefaultColorScheme, withDefaultProps } from \"@chakra-ui/react\"\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n\n\n}\n\nconst theme = extendTheme(\n  withDefaultProps({\n\n    defaultProps: {\n      size: \"sm\",\n      // colorScheme: \"brand\",\n      color: \"#fff\",\n\n    },\n    components: [\"Button\", \"TextArea\", \"Select\"],\n  }),\n  {\n    shadows: {\n      outline: \"0 0 0 3px #222222\"\n    },\n    config,\n    components: {\n      Input: {\n        sizes: {\n          sm: {\n            field: {\n              borderRadius: 'md'\n            },\n            addon: {\n              borderRadius: 'md'\n            }\n          },\n          baseStyle: {\n\n          }\n        }\n      },\n      Button: {\n        baseStyle: {\n          color: \"#fff\",\n        \n        }\n      },\n      Skeleton: {\n        baseStyle: {\n          bg: (props) => props.colors.gray[600]\n        }\n      },\n\n    },\n    colors: {\n      brand: {\n       100:'#FD5750',\n       200:'#FD5750',\n       300:'#FD5750',\n       400:'#FD5750',\n       500:'#FD5750',\n       600:'#FD5750',\n       700:'#FD5750',\n       800:'#FD5750',\n       900:'#FD5750'\n      },\n      gray: {\n        700: \"#141414\",\n        600: '#1d1d1d'\n      }\n    },\n\n    styles: {\n      global: (props) => ({\n        \"body\": {\n\n          fontFamily: \"body\",\n          // color: \"#fff\",\n          bg: '#141414',\n          // lineHeight: \"base\"\n        },\n        // button: {\n        //   color: '#fff'\n        // }\n\n      })\n    },\n\n  }\n  // ,withDefaultColorScheme({ colorScheme: \"brand\" })\n\n)\nexport default theme","export default __webpack_public_path__ + \"static/media/serverless-cloud-text.70f41d4b.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nconst baseURL = `${window.location.origin}/api`\n\nconst getHeaders = (password) => {\n    const storedPassword = localStorage.getItem(\"serverless-status\")\n    const parseStoredPassword = storedPassword ? JSON.parse(storedPassword) : ''\n    \n    return {\n        Authorization: `Bearer ${password || parseStoredPassword}`,\n        \"Content-Type\": \"application/json\",\n    }\n}\nexport const apiClient = async ({ url, body, password, method = 'GET' }) => {\n    \n    const res = await fetch(`${baseURL}/${url}`, {\n        method,\n        headers: getHeaders(password),\n        body\n    })\n    \n    const json = await res.json()\n    if (res.ok) {\n\n        return json\n    } else {\n\n        \n        throw new Error(json.message)\n    }\n}\n\n\n","\nimport { useToast } from \"@chakra-ui/react\"\nimport { useState } from \"react\"\nimport useSWR, { mutate } from \"swr\"\nimport { apiClient } from \"./api\"\n\nexport const Resource = ({path, render}) => {\n    const toast = useToast()\n    const [loadingAdd, setLoadingAdd] = useState(null)\n    const [loadingDelete, setLoadingDelete] = useState(null)\n    const { data, error } = useSWR(path, (url) => apiClient({ url }))\n    const loading = !data && !error\n    \n    \n    const reload = () => mutate(path)\n    const deleteResource = async (resourceId, next) => {\n        try {\n            setLoadingDelete(resourceId)\n            await apiClient({\n                url: `${path}/${resourceId}`, method: 'DELETE'\n            })\n            await reload()\n            toast({\n                title: `Item deleted successfully`,\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n            })\n            setLoadingDelete(null)\n            if (next) {\n                next()\n            }\n        } catch (e) {\n            \n            setLoadingDelete(null)\n            toast({\n                title: e.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            })\n        }\n    }\n    const addResource = async (resource, next) => {\n        try {\n            setLoadingAdd(true)\n            await apiClient({\n                url: `${path}`, method: 'PUT',\n                body: JSON.stringify(resource)\n            })\n            await reload()\n            setLoadingAdd(null)\n            if (!resource?.serviceId && !resource.incidentId) {\n\n                toast({\n                    title: `Item created successfully`,\n                    status: \"success\",\n                    duration: 5000,\n                    isClosable: true,\n                })\n            }\n            if (next) {\n                next()\n            }\n        } catch (e) {\n            setLoadingAdd(null)\n            toast({\n                title: e.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            })\n        }\n\n    }\n    return render({\n        data,\n        error,\n        loading,\n        reload,\n        deleteResource,\n        loadingDelete,\n        addResource,\n        loadingAdd\n    })\n}","import { Text } from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nconst relativeTime = require('dayjs/plugin/relativeTime');\n\ndayjs.extend(relativeTime);\n\nexport const UpdatedAt = ({updatedAt, createdAt}) => {\n    return (\n        <Text color=\"grey\" fontSize=\"xs\">\n\n        {createdAt !== updatedAt\n            ? `Updated ${dayjs(updatedAt).fromNow()}`\n            : `Created ${dayjs(createdAt).fromNow()}`}\n        \n    </Text>\n    )\n}","import { DeleteIcon } from \"@chakra-ui/icons\";\nimport {\n    Button,\n    Text,\n    FormControl,\n    FormLabel,\n    Input,\n    Select,\n    VStack,\n    Textarea,\n    Checkbox,\n    Grid,\n    Box,\n    Drawer,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerHeader,\n    DrawerBody,\n    DrawerFooter,\n    useDisclosure,\n    DrawerCloseButton,\n    AlertDialog,\n    AlertDialogOverlay,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogBody,\n    AlertDialogFooter,\n    Divider,\n    HStack,\n    Spinner,\n} from \"@chakra-ui/react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport useSWR from \"swr\";\nimport { apiClient } from \"./api\";\n\nimport { Resource } from \"./Resource\";\nimport { UpdatedAt } from \"./UpdatedAt\";\n\nexport const IncidentDrawer = ({\n    selectedIncident,\n    setSelectedIncident,\n    addIncident,\n    deleteIncident,\n    loadingDelete,\n    loadingAdd,\n}) => {\n    const [update, setUpdate] = useState({\n        updateDescription: \"\",\n        affectedServicesStatus: undefined,\n        incidentStatus: selectedIncident?.incidentStatus,\n    });\n    const incidentStatus = useMemo(\n        () => selectedIncident?.incidentStatus,\n        [selectedIncident]\n    );\n    useEffect(() => {\n        if (incidentStatus) {\n            setUpdate((prev) => ({\n                ...prev,\n                incidentStatus,\n            }));\n        }\n        return () => { };\n    }, [incidentStatus, setUpdate]);\n    const { data: servicesData } = useSWR(\"services\", (url) =>\n        apiClient({ url })\n    );\n\n    const services = servicesData\n        ? servicesData.services.sort(\n            (a, b) => b.serviceCreatedAt - a.serviceCreatedAt\n        )\n        : [];\n    const {\n        isOpen: isDrawerOpen,\n        onOpen: onDrawerOpen,\n        onClose: onDrawerClose,\n    } = useDisclosure();\n    const {\n        isOpen: isAlertOpen,\n        onOpen: onAlertOpen,\n        onClose: onAlertClose,\n    } = useDisclosure();\n\n    const addUpdateNext = () => {\n        setUpdate({\n            updateDescription: \"\",\n            affectedServicesStatus: undefined,\n            incidentStatus: selectedIncident?.incidentStatus,\n        });\n        \n    };\n    const deleteIncidentNext = () => {\n        onAlertClose();\n        handleDrawerClose();\n    };\n    useEffect(() => {\n        if (selectedIncident) {\n            onDrawerOpen();\n        }\n        return () => { };\n    }, [selectedIncident, onDrawerOpen]);\n    const handleDrawerClose = () => {\n        onDrawerClose();\n        setSelectedIncident(null);\n    };\n\n    const handleSaveIncident = async () => {\n        addIncident(\n            {\n                ...selectedIncident,\n                incidentStatus: selectedIncident?.incidentStatus || \"Investigating\",\n            },\n            handleDrawerClose\n        );\n    };\n\n    return (\n        <>\n            <Drawer\n                placement=\"right\"\n                onClose={handleDrawerClose}\n                isOpen={isDrawerOpen}\n                size=\"md\"\n                colorScheme=\"brand\"\n            >\n                <DrawerOverlay />\n                <DrawerContent>\n                    <DrawerHeader borderBottomWidth=\"1px\">\n                        <DrawerCloseButton margin=\"auto\" />\n                        {selectedIncident?.incidentName || \"Create Incindent\"}\n                    </DrawerHeader>\n                    <DrawerBody>\n                        <VStack spacing=\"24px\">\n                            <FormControl id=\"incidentName\">\n                                <FormLabel>Incident Name</FormLabel>\n                                <Input\n                                    placeholder=\"Incident Name\"\n                                    type=\"text\"\n                                    value={selectedIncident?.incidentName || \"\"}\n                                    onChange={(e) =>\n                                        setSelectedIncident((prev) => ({\n                                            ...prev,\n                                            incidentName: e.target.value,\n                                        }))\n                                    }\n                                    onKeyUp={(event) => {\n                                        if (event.key === \"Enter\") {\n                                            handleSaveIncident();\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n                            <FormControl id=\"incidentDescription\">\n                                <FormLabel>Incident Description</FormLabel>\n\n                                <Textarea\n                                    placeholder=\"Incident Description\"\n                                    value={selectedIncident?.incidentDescription || \"\"}\n                                    onChange={(e) =>\n                                        setSelectedIncident((prev) => ({\n                                            ...prev,\n                                            incidentDescription: e.target.value,\n                                        }))\n                                    }\n                                    onKeyUp={(event) => {\n                                        if (event.key === \"Enter\") {\n                                            handleSaveIncident();\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n                            <FormControl id=\"incidentStatus\">\n                                <FormLabel>Incident Status</FormLabel>\n\n                                <Select\n                                    placeholder=\"Investigating\"\n                                    value={selectedIncident?.incidentStatus || \"Investigating\"}\n                                    onChange={(e) =>\n                                        setSelectedIncident((prev) => ({\n                                            ...prev,\n                                            incidentStatus: e.target.value,\n                                        }))\n                                    }\n                                >\n                                    <option value=\"Investigating\">Investigating</option>\n                                    <option value=\"Identified\">Identified</option>\n                                    <option value=\"Monitoring\">Monitoring</option>\n                                    <option value=\"Resolved\">Resolved</option>\n                                </Select>\n                            </FormControl>\n                            <FormControl id=\"affectedServicesIds\">\n                                <FormLabel>Affected Services</FormLabel>\n                                <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n                                    {services &&\n                                        services.map((service) => (\n                                            <Box key={service.serviceId}>\n                                                <Checkbox\n                                                    isChecked={\n                                                        !!selectedIncident?.affectedServicesIds?.find(\n                                                            (id) => id === service.serviceId\n                                                        )\n                                                    }\n                                                    onChange={(e) =>\n                                                        setSelectedIncident((prev) => ({\n                                                            ...prev,\n                                                            affectedServicesIds: e.target.checked\n                                                                ? [\n                                                                    ...(prev.affectedServicesIds || []),\n                                                                    service.serviceId,\n                                                                ]\n                                                                : prev.affectedServicesIds?.filter(\n                                                                    (id) => id !== service.serviceId\n                                                                ),\n                                                        }))\n                                                    }\n                                                >\n                                                    {service.serviceName}\n                                                </Checkbox>\n                                            </Box>\n                                        ))}\n                                </Grid>\n                            </FormControl>\n                            {selectedIncident?.incidentId && (\n                                <Resource\n                                    path={`incidents/${selectedIncident?.incidentId}/updates`}\n                                    render={(props) => (\n                                        <Box\n                                            width=\"100%\"\n                                            p={5}\n                                            shadow=\"md\"\n                                            borderWidth=\"1px\"\n                                            borderRadius=\"md\"\n                                        >\n                                            <VStack spacing=\"24px\">\n                                                <FormControl id=\"updateDescription\">\n                                                    <FormLabel>Update Description</FormLabel>\n\n                                                    <Textarea\n                                                        placeholder=\"Update Description\"\n                                                        value={update?.updateDescription || \"\"}\n                                                        onChange={(e) =>\n                                                            setUpdate((prev) => ({\n                                                                ...prev,\n                                                                updateDescription: e.target.value,\n                                                            }))\n                                                        }\n                                                        onKeyUp={(event) => {\n                                                            if (event.key === \"Enter\") {\n                                                                props.addResource(update, addUpdateNext);\n                                                            }\n                                                        }}\n                                                    />\n                                                </FormControl>\n                                                <FormControl id=\"updateAffectedServicesStatus\">\n                                                    <FormLabel>Update Affected Services Status</FormLabel>\n\n                                                    <Select\n                                                        placeholder=\"Don't change affected services status\"\n                                                        value={update?.affectedServicesStatus}\n                                                        onChange={(e) =>\n                                                            setUpdate((prev) => ({\n                                                                ...prev,\n                                                                affectedServicesStatus: e.target.value,\n                                                            }))\n                                                        }\n                                                    >\n                                                        <option value=\"Operational\">Operational</option>\n                        <option value=\"Degraded Performance\">Degraded Performance</option>\n                        <option value=\"Partial Outage\">Partial Outage</option>\n                        <option value=\"Major Outage\">Major Outage</option>\n                                                    </Select>\n                                                </FormControl>\n                                                <FormControl id=\"updateAffectedServicesStatus\">\n                                                    <HStack justifyContent=\"flex-end\">\n\n                                                        <Button\n                                                            isLoading={props.loadingAdd}\n                                                            onClick={() =>\n                                                                props.addResource(update, addUpdateNext)\n                                                            }\n                                                            colorScheme=\"brand\"\n                                                            color=\"#fff\"\n                                                        >\n                                                            Post Update\n                                                        </Button>\n                                                    </HStack>\n                                                </FormControl>\n                                                <Divider />\n                                                {props.data?.updates\n                                                    ?.sort(\n                                                        (a, b) => b.updateCreatedAt - a.updateCreatedAt\n                                                    )\n                                                    .map((update) => (\n                                                        <HStack\n                                                            justifyContent=\"space-between\"\n                                                            key={update.updateId}\n                                                            width=\"100%\"\n                                                            p={5}\n                                                            shadow=\"md\"\n                                                            borderWidth=\"1px\"\n                                                            borderRadius=\"md\"\n                                                        >\n                                                            <Text>{update?.updateDescription}</Text>\n                                                            <HStack>\n                                                                <UpdatedAt\n                                                                    updatedAt={update.updateUpdatedAt}\n                                                                    createdAt={update.updateCreatedAt}\n                                                                />\n\n                                                                {props.loadingDelete === update.updateId ? (\n                                                                    <Spinner size=\"xs\" margin=\"auto 5px\" />\n                                                                ) : (\n                                                                    <DeleteIcon\n                                                                        size=\"xs\"\n                                                                        marginLeft=\"5px\"\n                                                                        cursor=\"pointer\"\n                                                                        onClick={() =>\n                                                                            props.deleteResource(update.updateId)\n                                                                        }\n                                                                    />\n                                                                )}\n                                                            </HStack>\n                                                        </HStack>\n                                                    ))}\n                                            </VStack>\n                                        </Box>\n                                    )}\n                                />\n                            )}\n                        </VStack>\n                    </DrawerBody>\n                    <DrawerFooter borderTopWidth=\"1px\">\n                        <Button\n                            onClick={onAlertOpen}\n                            margin=\"auto auto auto 0\"\n                            leftIcon={<DeleteIcon />}\n\n                        >\n                            Delete\n                        </Button>\n                        <Button mr={3} onClick={handleDrawerClose}>\n                            Close\n                        </Button>\n                        <Button\n                            isLoading={loadingAdd}\n                            colorScheme=\"brand\"\n                            color=\"#fff\"\n                            onClick={handleSaveIncident}\n                        >\n                            {selectedIncident && selectedIncident.incidentId\n                                ? \"Save\"\n                                : \"Create\"}\n                        </Button>\n                    </DrawerFooter>\n                </DrawerContent>\n            </Drawer>\n            {selectedIncident && (\n                <AlertDialog isOpen={isAlertOpen} onClose={onAlertClose}>\n                    <AlertDialogOverlay>\n                        <AlertDialogContent>\n                            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                                Delete Incident\n                            </AlertDialogHeader>\n\n                            <AlertDialogBody>\n                                Are you sure you want to delete{\" \"}\n                                <Text as=\"b\">{selectedIncident?.incidentName}</Text> ?\n                            </AlertDialogBody>\n\n                            <AlertDialogFooter>\n                                <Button onClick={onAlertClose}>Cancel</Button>\n                                <Button\n                                    isLoading={loadingDelete}\n                                    colorScheme=\"red\"\n                                    color=\"#fff\"\n                                    onClick={() =>\n                                        deleteIncident(\n                                            selectedIncident?.incidentId,\n                                            deleteIncidentNext\n                                        )\n                                    }\n                                    ml={3}\n                                >\n                                    Delete\n                                </Button>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialogOverlay>\n                </AlertDialog>\n            )}\n        </>\n    );\n};\n","export const getStatusColor = (status, colors = {}) =>\n{\n    const num = 500\n    return status === \"Operational\" || status === \"Resolved\"\n    ? colors?.green[num] || \"green\"\n    : status === \"Degraded Performance\"\n    ? colors?.yellow[num] || \"yellow\"\n    : status === \"Partial Outage\" || status === \"Identified\"\n    ? colors?.orange[num] || \"orange\"\n    : status === \"Monitoring\"\n    ? colors.blue[num] || \"blue\"\n    : colors.red[num] || \"red\";\n}\n  \n","import { Box, Tag, Text } from '@chakra-ui/react';\nimport { useTheme } from '@emotion/react';\nimport dayjs from 'dayjs';\nimport { getStatusColor } from './utils';\nconst relativeTime = require('dayjs/plugin/relativeTime');\n\ndayjs.extend(relativeTime);\n\nexport const Status = ({status}) => {\n    const theme = useTheme()\n    return (\n        <Tag>\n        <Box\n          width=\"10px\"\n          height=\"10px\"\n          style={{\n            background: getStatusColor(status, theme.colors),\n            borderRadius: \"50%\",\n            marginRight: \"10px\",\n          }}\n        />\n        <Text  fontSize=\"xs\">\n\n        {status}\n        </Text>\n      </Tag>\n    )\n}","import { Box, Text } from \"@chakra-ui/react\"\nimport { useTheme } from \"@emotion/react\"\nimport useSWR from \"swr\"\nimport { apiClient } from \"./api\"\nimport { UpdatedAt } from \"./UpdatedAt\"\nimport { getStatusColor } from \"./utils\"\n\nexport const UpdatesRow = ({ incident }) => {\n    const theme = useTheme()\n    const { data } = useSWR(`incidents/${incident?.incidentId}/updates`, (url) => apiClient({ url }))\n    const updates = data?.updates\n    \n    return (\n\n        <Box borderLeftWidth=\"1px\" borderLeftColor=\"grey\"  transform=\"translateY(10px)\">\n            {updates?.sort((a, b) => b.updateCreatedAt - a.updateCreatedAt)\n                .map(update => (\n                    <Box key={update.updateId} paddingLeft=\"20px\" marginBottom=\"10px\" position=\"relative\" transform=\"translateY(-10px)\">\n                        <Box width=\"10px\" height=\"10px\" position=\"absolute\" left=\"-5px\" top=\"8px\" borderRadius=\"50%\" backgroundColor={getStatusColor(update.affectedServicesStatus, theme.colors)} />\n                        <Box >\n                            <Text >{update.updateDescription}</Text>\n                            <UpdatedAt updatedAt={update.updateUpdatedAt} createdAt={update.updateCreatedAt} />\n                        </Box>\n                    </Box>\n                ))}\n        </Box>\n    )\n}","import {\n    Box,\n    Heading,\n    HStack,\n    ListItem,\n    Grid,\n    VStack,\n    Button,\n    UnorderedList,\n    Skeleton,\n    Select,\n} from \"@chakra-ui/react\";\nimport { useTheme } from \"@emotion/react\";\nimport { useState } from \"react\";\nimport { useLocalStorage } from \"react-use\";\nimport useSWR from \"swr\";\nimport { apiClient } from \"./api\";\nimport { IncidentDrawer } from \"./IncidentDrawer\";\n\nimport { Resource } from \"./Resource\";\nimport { Status } from \"./Status\";\nimport { UpdatedAt } from \"./UpdatedAt\";\nimport { UpdatesRow } from \"./UpdatesRow\";\nimport { getStatusColor } from \"./utils\";\n\nexport const Incidents = () => {\n    const theme = useTheme();\n\n    const [selectedIncident, setSelectedIncident] = useState(null);\n    const [filterIncidents, setFilterIncidents] = useState(\"\");\n    const { data } = useSWR(\"services\", (url) => apiClient({ url }));\n    const services = data?.services;\n    const [storedPassword] = useLocalStorage('serverless-status', '');\n    const isLoggedIn = !!storedPassword\n    return (\n        <Box mt={\"30px\"}>\n            <HStack spacing=\"24px\" justifyContent=\"space-between\">\n                <Heading size=\"lg\">Incidents</Heading>\n                <HStack>\n                    <Select\n                        maxW=\"120px\"\n                        placeholder=\"All\"\n                        value={filterIncidents}\n                        onChange={(e) => setFilterIncidents(e.target.value)}\n                    >\n                        <option value=\"Investigating\">Investigating</option>\n                        <option value=\"Identified\">Identified</option>\n                        <option value=\"Monitoring\">Monitoring</option>\n                        <option value=\"Resolved\">Resolved</option>\n                    </Select>\n                    {isLoggedIn &&\n\n                        <Button\n                            onClick={() => setSelectedIncident({})}\n                            colorScheme=\"brand\"\n                            color=\"#fff\"\n                        >\n                            New Incident\n                        </Button>\n                    }\n                </HStack>\n            </HStack>\n\n            <Resource\n                path={`incidents${filterIncidents ? `?incidentStatus=${filterIncidents}` : ``\n                    }`}\n                render={(props) => (\n                    <VStack alignItems=\"flex-start\" mt={25} spacing=\"24px\">\n                        {isLoggedIn && <IncidentDrawer\n                            services={services}\n                            selectedIncident={selectedIncident}\n                            setSelectedIncident={setSelectedIncident}\n                            addIncident={props.addResource}\n                            loadingAdd={props.loadingAdd}\n                            deleteIncident={props.deleteResource}\n                            loadingDelete={props.loadingDelete}\n                        />}\n\n                        {props.loading ? (\n                            <>\n                                <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\" />\n                                <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\" />\n                                <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\" />\n                            </>\n                        ) : (\n                            props?.data?.incidents\n                                ?.sort((a, b) => b.incidentCreatedAt - a.incidentCreatedAt)\n                                .map((incident) => (\n                                    <Box\n                                        onClick={() => {\n                                            if (isLoggedIn) {\n\n                                                setSelectedIncident(incident);\n                                            }\n                                        }}\n                                        css={{\n                                            transition: \"all .3s ease-in-out\",\n                                            \"&:hover\": {\n                                                backgroundColor: '#1D1D1D',\n                                            },\n                                        }}\n                                        key={incident?.incidentId}\n                                        spacing={8}\n                                        width=\"100%\"\n                                        p={5}\n                                        minH=\"210px\"\n                                        shadow=\"md\"\n                                        borderWidth=\"1px\"\n                                        borderRadius=\"md\"\n                                        flex=\"1\"\n                                        borderLeftColor={getStatusColor(\n                                            incident.incidentStatus,\n                                            theme.colors\n                                        )}\n                                        borderLeftWidth=\"5px\"\n                                        cursor=\"pointer\"\n                                    >\n                                        <Grid templateColumns=\"2fr 1fr\" gap={10}>\n                                            <VStack alignItems=\"flex-start\">\n                                                <HStack>\n                                                    <Heading as=\"h2\" size=\"md\">\n                                                        {incident.incidentName}\n                                                    </Heading>\n                                                    <UpdatedAt\n                                                        updatedAt={incident.incidentUpdatedAt}\n                                                        createdAt={incident.incidentCreatedAt}\n                                                    />\n                                                </HStack>\n                                                <Heading\n                                                    as=\"h5\"\n                                                    size=\"sm\"\n                                                    fontWeight=\"normal\"\n                                                    color=\"grey\"\n                                                >\n                                                    {incident.incidentDescription}\n                                                </Heading>\n                                                <UpdatesRow incident={incident} />\n                                            </VStack>\n                                            <VStack alignItems=\"flex-start\">\n                                                <Heading as=\"h5\" size=\"sm\" color=\"grey\">\n                                                    Incident Status\n                                                </Heading>\n\n                                                <Status status={incident.incidentStatus} />\n                                                <Heading as=\"h5\" size=\"sm\" color=\"grey\">\n                                                    Affected Services\n                                                </Heading>\n                                                <UnorderedList\n                                                    style={{\n                                                        marginLeft: \"20px\",\n                                                    }}\n                                                >\n                                                    {services\n                                                        ?.filter((service) =>\n                                                            incident.affectedServicesIds.includes(\n                                                                service.serviceId\n                                                            )\n                                                        )\n                                                        .map((service) => (\n                                                            <ListItem key={service.serviceId}>\n                                                                {service.serviceName}\n                                                            </ListItem>\n                                                        ))}\n                                                </UnorderedList>\n                                            </VStack>\n                                        </Grid>\n                                    </Box>\n                                ))\n                        )}\n                    </VStack>\n                )}\n            />\n        </Box>\n    );\n};\n","import { DeleteIcon } from \"@chakra-ui/icons\"\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n    Text,\n    FormControl,\n    FormLabel,\n    Input,\n    Select,\n    VStack,\n    Textarea,\n    AlertDialog,\n    AlertDialogOverlay,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogBody,\n    AlertDialogFooter,\n    useDisclosure,\n} from \"@chakra-ui/react\"\nimport { useEffect } from \"react\";\n\nexport const ServiceModal = ({ selectedService, setSelectedService, addService, loadingAdd, deleteService, loadingDelete }) => {\n    \n    const { isOpen: isModalOpen, onOpen: onModalOpen, onClose: onModalClose } = useDisclosure();\n    const { isOpen: isAlertOpen, onOpen: onAlertOpen, onClose: onAlertClose } = useDisclosure();\n    const deleteServiceNext = () => {\n        onAlertClose()\n        handleModalClose()\n        \n    }\n    useEffect(() => {\n        if (selectedService) {\n            onModalOpen()\n        }\n        return () => {\n\n        }\n    }, [selectedService, onModalOpen])\n    const handleModalClose = () => {\n        onModalClose()\n        setSelectedService(null)\n    }\n    const addServiceNext = () => {\n        setSelectedService(null)\n        onModalClose()\n    }\n    const handleSaveService = async () => {\n        addService({ ...selectedService, serviceStatus: selectedService?.serviceStatus || 'Operational' }, addServiceNext)\n    }\n    return (\n\n        <Modal isOpen={isModalOpen} onClose={handleModalClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{selectedService && selectedService.serviceId ? 'Edit Service' : 'Create Service'}</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    <VStack spacing=\"24px\">\n\n                        <FormControl id=\"serviceName\">\n                            <FormLabel>Service Name</FormLabel>\n                            <Input placeholder=\"Service Name\" type=\"text\" value={selectedService && selectedService.serviceName} onChange={(e) => setSelectedService(prev => ({ ...prev, serviceName: e.target.value }))}\n                                onKeyUp={(event) => {\n                                    if (event.key === \"Enter\") {\n                                        handleSaveService()\n                                    }\n                                }}\n\n                            />\n\n                        </FormControl>\n                        <FormControl id=\"serviceDescription\">\n                            <FormLabel>Service Description</FormLabel>\n\n                            <Textarea placeholder=\"Service Description\"\n                                value={selectedService && selectedService.serviceDescription} onChange={(e) => setSelectedService(prev => ({ ...prev, serviceDescription: e.target.value }))}\n                                onKeyUp={(event) => {\n                                    if (event.key === \"Enter\") {\n                                        handleSaveService()\n                                    }\n                                }}\n                            />\n                        </FormControl>\n                        <FormControl id=\"serviceStatus\">\n                            <FormLabel>Service Status</FormLabel>\n                            <Select placeholder=\"Operational\" value={selectedService?.ServiceStatus || 'Operational'} onChange={e => setSelectedService(prev => ({ ...prev, serviceStatus: e.target.value }))}>\n                                <option value=\"Operational\">Operational</option>\n                                <option value=\"Degraded Performance\">Degraded Performance</option>\n                                <option value=\"Partial Outage\">Partial Outage</option>\n                                <option value=\"Major Outage\">Major Outage</option>\n                            </Select>\n\n                        </FormControl>\n                    </VStack>\n                </ModalBody>\n\n            \n                <ModalFooter>\n\n                    <Button\n                        onClick={onAlertOpen}\n                        margin=\"auto auto auto 0\"\n                        leftIcon={<DeleteIcon />}  >\n                        Delete\n                    </Button>\n                    <AlertDialog\n                        isOpen={isAlertOpen}\n\n                        onClose={onAlertClose}\n                    >\n                        <AlertDialogOverlay>\n                            <AlertDialogContent>\n                                <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                                    Delete Service\n                                </AlertDialogHeader>\n\n                                <AlertDialogBody>\n                                    Are you sure you want to delete <Text as=\"b\">{selectedService?.serviceName}</Text> ?\n                                </AlertDialogBody>\n\n                                <AlertDialogFooter>\n                                    <Button onClick={onAlertClose}>\n                                        Cancel\n                                    </Button>\n                                    <Button isLoading={loadingDelete} colorScheme=\"brand\" color=\"#fff\" onClick={() => deleteService(selectedService?.serviceId, deleteServiceNext)} ml={3}>\n                                        Delete\n                                    </Button>\n                                </AlertDialogFooter>\n                            </AlertDialogContent>\n                        </AlertDialogOverlay>\n                    </AlertDialog>\n                    <Button mr={3} onClick={handleModalClose}>\n                        Close\n                    </Button>\n                    <Button isLoading={loadingAdd} colorScheme=\"brand\" color=\"#fff\" onClick={handleSaveService}>Save</Button>\n                </ModalFooter>\n            </ModalContent>\n\n        </Modal>\n    )\n}","import { Heading, Button, HStack, VStack, Box, Select, Skeleton } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\n\n\nimport { ServiceModal } from \"./ServiceModal\";\nimport { Resource } from \"./Resource\";\nimport { Status } from \"./Status\";\nimport { UpdatedAt } from \"./UpdatedAt\";\nimport { useLocalStorage } from \"react-use\";\n\nexport const Services = () => {\n    \n\n\n    const [selectedService, setSelectedService] = useState(null);\n    const [filterServices, setFilterServices] = useState('');\n    \n    const [storedPassword] = useLocalStorage('serverless-status', '');\n    const isLoggedIn = !!storedPassword\n    return (\n        <Box mt={\"30px\"}>\n            <Box>\n                <HStack spacing=\"24px\" justifyContent=\"space-between\">\n                    <Heading size=\"lg\">Services</Heading>\n                    <HStack >\n                    <Select\n                        maxW=\"120px\"\n                        placeholder=\"All\"\n                        value={filterServices}\n                        onChange={(e) => setFilterServices(e.target.value)}\n                    >\n                        <option value=\"Operational\">Operational</option>\n                        <option value=\"Degraded Performance\">Degraded Performance</option>\n                        <option value=\"Partial Outage\">Partial Outage</option>\n                        <option value=\"Major Outage\">Major Outage</option>\n                    </Select>\n                    {isLoggedIn && \n                    \n                    <Button size=\"sm\" onClick={() => setSelectedService({})}colorScheme=\"brand\" color=\"#fff\" >\n                        New Service\n                    </Button>\n                    }\n                        </HStack>\n                </HStack>\n\n                <Resource\n\n                    path={`services${filterServices ? `?serviceStatus=${filterServices}` : ``}`}\n                    render={(props) => (\n                        <VStack alignItems=\"flex-start\" mt={25} spacing=\"24px\">\n                            {isLoggedIn && \n                            \n                            <ServiceModal\n\n                                selectedService={selectedService}\n                                setSelectedService={setSelectedService}\n                                addService={props.addResource}\n                                deleteService={props.deleteResource}\n                                loadingAdd={props.loadingAdd}\n                                loadingDelete={props.loadingDelete}\n                            />\n                            }\n                            {props.loading ? \n                               <>\n                               <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\"/>\n                               <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\"/>\n                           </>\n                            : props.data &&\n                                props.data.services &&\n                                props.data.services\n                                    .sort((a, b) => b.serviceCreatedAt - a.serviceCreatedAt)\n                                    .map((service) => (\n                                        <Box\n                                            cursor=\"pointer\"\n                                            onClick={() => {\n                                                if (isLoggedIn) {\n\n                                                    setSelectedService(service)\n                                                }\n                                            }}\n                                            key={service.serviceId}\n                                            spacing={8}\n                                            width=\"100%\"\n                                            p={5}\n                                            shadow=\"md\"\n                                            borderWidth=\"1px\"\n                                            borderRadius=\"md\"\n                                            flex=\"1\"\n                                            css={{\n                                                transition: 'all .3s ease-in-out',\n                                                '&:hover': {\n                                                    backgroundColor: '#1D1D1D',\n                                                }\n                                            }}\n                                        >\n                                            <VStack alignItems=\"flex-stretch\">\n\n                                                <HStack justifyContent=\"space-between\">\n                                                    <Heading as=\"h2\" size=\"md\">\n                                                        {service.serviceName}\n                                                    </Heading>\n                                                    <HStack>\n                                                        <Status status={service.serviceStatus} />\n                                                    </HStack>\n                                                </HStack>\n                                                <HStack justifyContent=\"space-between\">\n                                                    <Heading as=\"h5\" size=\"sm\" fontWeight=\"normal\" color=\"grey\">\n                                                        {service.serviceDescription}\n                                                    </Heading>\n                                                    <UpdatedAt updatedAt={service.serviceUpdatedAt} createdAt={service.serviceCreatedAt} />\n                                                </HStack>\n                                            </VStack>\n                                        </Box>\n                                    ))}\n                        </VStack>\n                    )}\n                />\n            </Box>\n        </Box>\n    );\n};\n","import { forwardRef } from \"@chakra-ui/react\";\nimport { createElement, useLayoutEffect, useRef, useState } from \"react\";\n\nexport const Collapsible = forwardRef(\n    ({ collapsed, as = \"div\", ...props }, outerRef) => {\n      const ref = useRef(outerRef);\n      const [height, setHeight] = useState(collapsed ? 0 : undefined);\n  \n      useLayoutEffect(() => {\n        if (ref.current === null) {\n          return;\n        }\n  \n        if (collapsed) {\n          setHeight(0);\n          return;\n        }\n  \n        setHeight(ref.current.scrollHeight);\n      }, [ref, collapsed]);\n  \n      return createElement(as, {\n        ...props,\n        ref,\n        style: {\n          overflow: \"hidden\",\n          transition: \"height 300ms ease-in-out\",\n          height,\n          display: \"grid\",\n          gridTemplateColumns: \"auto min-content\",\n          gap: \"15px\",\n          ...props.style,\n        },\n      });\n    }\n  );","export default __webpack_public_path__ + \"static/media/cloud-dots.c54316c8.svg\";","import { Alert, AlertIcon, Box, Button, Center, Heading, Input, VStack } from \"@chakra-ui/react\"\nimport { useState } from \"react\"\n\nimport { useLocalStorage } from \"react-use\";\nimport { apiClient } from \"./api\";\nimport { Collapsible } from \"./components/Collapsible\";\nimport ServerlessCloudLogo from './assets/serverless-cloud-text.svg'\nimport CloudDots from './assets/cloud-dots.svg'\n\nexport const Login = () => {\n\n    const [, setStoredPassword] = useLocalStorage('serverless-status', '');\n    const [password, setPassword] = useState('')\n    const [loading, setloading] = useState(false)\n    const [errorMessage, setErrorMessage] = useState('')\n    const login = async () => {\n        if (!password) {\n            setErrorMessage('Please enter password value')\n            return\n        }\n\n\n        try {\n            setloading(true)\n            await apiClient({ url: 'auth', password })\n\n            setStoredPassword(password)\n            window.location.href = '/'\n        } catch (e) {\n            \n            setErrorMessage(e.message)\n\n        }\n        setloading(false)\n    }\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n              <Box\n               position=\"absolute\"\n               left=\"0\"\n               top=\"350px\"\n               z-index=\"-1\"\n               display=\"flex\"\n               justifyContent=\"space-between\"\n               width=\"100%\"\n               css={{\n                   'img:nth-child(2)': {\n                    '-webkit-transform': 'scaleX(-1)',\n                    transform: 'scaleX(-1)'\n                   }\n               }}\n              >\n        <img src={CloudDots} alt=\"Serverless Cloud\" />\n        <img src={CloudDots} alt=\"Serverless Cloud\" />\n      </Box>\n            <Center h=\"100vh\" color=\"white\">\n                \n                <VStack spacing=\"24px\" >\n                <img src={ServerlessCloudLogo} alt=\"Serverless Cloud\" />\n\n                    <Heading size=\"xl\" fontSize=\"80px\">status.serverless.com</Heading>\n                    <Heading size=\"lg\">Login</Heading>\n                    <Input placeholder=\"Password\" type=\"password\" \n                    maxWidth=\"400px\"\n                    onChange={e => {\n                        setPassword(e.target.value)\n                        setErrorMessage('')\n                    }}\n                        onKeyUp={(event) => {\n                            if (event.key === \"Enter\") {\n                                login()\n                            }\n                        }}\n                    />\n                    <Button \n                    maxWidth=\"400px\"\n                    isLoading={loading} onClick={login} size=\"md\" width=\"100%\" colorScheme=\"brand\" color=\"#fff\">Login</Button>\n                    <Collapsible collapsed={!errorMessage}>\n                        <Alert status=\"error\">\n                            <AlertIcon />\n                            {errorMessage}\n                        </Alert>\n                    </Collapsible>\n\n                </VStack>\n            </Center>\n\n\n        </Box >\n    )\n}\n\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport theme from \"./theme\";\nimport {\n  ChakraProvider,\n  ColorModeScript,\n  Button,\n  Box,\n  Container,\n  HStack,\n\n  Heading,\n} from \"@chakra-ui/react\";\nimport ServerlessCloudLogo from './assets/serverless-cloud-text.svg'\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Incidents } from \"./Incidents\";\nimport { Services } from \"./Services\";\nimport { useLocalStorage } from \"react-use\";\nimport { Login } from \"./Login\";\n\nconst App = () => {\n  const [activePage, setActivePage] = useState('/')\n  const [storedPassword] = useLocalStorage('serverless-status', '');\n  const isLoggedIn = !!storedPassword\n\n  const logout = () => {\n    localStorage.removeItem(\"serverless-status\");\n    window.location.reload();\n  };\n\n\n\n  return (\n\n    <Box minHeight=\"100vh\">\n      {\n\n        <Box p={5} borderBottomWidth=\"1px\">\n          <Container maxW=\"container.lg\">\n            <HStack justifyContent=\"space-between\">\n                <img src={ServerlessCloudLogo} style={{ maxWidth: '200px' }} alt=\"Serverless Cloud\" onClick={() => setActivePage('/')}/>\n              Ç\n              {isLoggedIn ?\n                <Button onClick={logout}>Logout</Button>\n                :\n                <Button onClick={() => setActivePage('/login')}>Login</Button>\n              }\n\n            </HStack>\n          </Container>\n        </Box>\n      }\n      <Container maxW=\"container.lg\">\n        {activePage === '/' ?\n          <>\n            <Services />\n            <Incidents />\n          </>\n          : activePage === '/login' ? <Login /> : null}\n\n\n      </Container>\n    </Box>\n\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}