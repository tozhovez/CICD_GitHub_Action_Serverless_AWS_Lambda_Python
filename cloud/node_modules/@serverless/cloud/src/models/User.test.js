const configUtils = require('@serverless/utils/config')
const accountUtils = require('@serverless/utils/account')
const platformClient = require('@serverless/platform-client')
const request = require('../utils/request')

const User = require('./User')

const invalidUserId = 'github|abc'
const testOrgsList = [{ orgName: 'orgName' }]
const platformLoginUrl = 'https://app.serverless.com/abc'

const createTestUser = (overwrites = {}) => {
  const testUser = {
    userId: 'userId',
    username: 'username',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessKeys: 'accessKey'
  }

  return { ...testUser, ...overwrites }
}

const createTestLoginData = (overwrites = {}) => {
  const testLoginData = {
    id: 'id',
    name: 'name',
    email: 'email',
    username: 'username',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken',
    idToken: 'idToken',
    expiresAt: 'expiresAt'
  }

  return { ...testLoginData, ...overwrites }
}

jest.mock('../utils/request')
jest.mock('@serverless/utils/config')
jest.mock('@serverless/utils/account')
jest.mock('@serverless/platform-client', () => {
  const sdkMocks = {
    config: jest.fn(),
    login: jest.fn(),
    getInitToken: jest.fn(),
    organizations: {
      list: jest.fn()
    }
  }
  return {
    sdkMocks,
    ServerlessSDK: function () {
      return sdkMocks
    }
  }
})

describe('CLI.Users', () => {
  beforeEach(() => {
    jest.resetAllMocks()
  })

  describe('constructor()', () => {
    it('should load user data', () => {
      new User()
      expect(configUtils.getLoggedInUser.mock.calls.length).toBe(1)
    })
  })

  describe('load()', () => {
    describe('if logged out', () => {
      let user
      beforeEach(() => {
        configUtils.getLoggedInUser.mockReturnValue(null)

        user = new User()
        user.load()
      })

      it('should NOT set userId property', () => {
        expect(user.userId).toBe(undefined)
      })
      it('should NOT set username property', () => {
        expect(user.username).toBe(undefined)
      })
      it('should NOT set refreshToken property', () => {
        expect(user.refreshToken).toBe(undefined)
      })
      it('should NOT set idToken property', () => {
        expect(user.token).toBe(undefined)
      })
      it('should NOT set accessKeys property', () => {
        expect(user.accessKeys).toBe(undefined)
      })
    })

    describe('if logged in', () => {
      let user
      beforeEach(() => {
        configUtils.getLoggedInUser.mockReturnValue(createTestUser())

        user = new User()
        user.load()
      })

      it('should set userId property', () => {
        expect(user.userId).toBe(createTestUser().userId)
      })
      it('should set username property', () => {
        expect(user.username).toBe(createTestUser().username)
      })
      it('should set refreshToken property', () => {
        expect(user.refreshToken).toBe(createTestUser().refreshToken)
      })
      it('should set token property', () => {
        expect(user.token).toBe(createTestUser().idToken)
      })
      it('should set accessKeys property', () => {
        expect(user.accessKeys).toBe(createTestUser().accessKeys)
      })
    })
  })

  describe('isLoggedIn()', () => {
    describe('if valid user exists in memory', () => {
      let user
      beforeEach(() => {
        user = new User()
        user.userId = createTestUser().userId
        configUtils.getLoggedInUser.mockReset()
      })

      it('should return true', () => {
        expect(user.isLoggedIn()).toBeTruthy()
      })

      it('should NOT call load()', () => {
        user.isLoggedIn()
        expect(configUtils.getLoggedInUser).not.toHaveBeenCalled()
      })
    })

    describe('if valid user exists in FS', () => {
      let user
      beforeEach(() => {
        user = new User()
        configUtils.getLoggedInUser.mockReturnValue(createTestUser())
      })

      it('should return true', () => {
        expect(user.isLoggedIn()).toBeTruthy()
      })

      it('should call load()', () => {
        user.isLoggedIn()
        expect(configUtils.getLoggedInUser).toHaveBeenCalled()
      })
    })

    describe('if no user exists in FS', () => {
      const user = new User()

      it('should return false', () => {
        expect(user.isLoggedIn()).toBeFalsy()
      })

      it('should call load()', () => {
        user.isLoggedIn()
        expect(configUtils.getLoggedInUser).toHaveBeenCalled()
      })
    })

    describe('if invalid user exists in FS', () => {
      it('should return false', () => {
        const user = new User()
        configUtils.getLoggedInUser.mockReturnValue(createTestUser({ userId: invalidUserId }))
        expect(user.isLoggedIn()).toBeFalsy()
      })
    })

    describe('if invalid user exists in memory', () => {
      let user
      beforeEach(() => {
        user = new User()
        configUtils.getLoggedInUser.mockReturnValue(createTestUser({ userId: invalidUserId }))
      })

      it('should return false', () => {
        expect(user.isLoggedIn()).toBeFalsy()
      })

      it('should call check FS for valid user', () => {
        user.isLoggedIn()
        expect(configUtils.getLoggedInUser).toHaveBeenCalled()
      })
    })
  })

  describe('getToken()', () => {
    describe('if logged out', () => {
      it('should return null', async () => {
        const user = new User()
        expect(await user.getToken()).toBe(null)
      })
    })

    describe('if logged in', () => {
      let user
      beforeEach(() => {
        user = new User()
        configUtils.getLoggedInUser.mockReturnValue(createTestUser())
      })

      it('should refresh token', async () => {
        await user.getToken()
        expect(accountUtils.refreshToken).toHaveBeenCalled()
      })

      it('should return refreshed token', async () => {
        const expectedToken = 'refreshed token'
        accountUtils.refreshToken.mockImplementation(() => {
          configUtils.getLoggedInUser.mockImplementation(() => createTestUser({ idToken: expectedToken }))
        })

        expect(await user.getToken()).toBe(expectedToken)
      })
    })
  })

  describe('listOrgs()', () => {
    describe('if logged out', () => {
      it('should return null', async () => {
        const user = new User()
        expect(await user.listOrgs()).toBe(null)
      })
    })

    describe('if logged in', () => {
      let orgsList
      beforeEach(async () => {
        const user = new User()
        configUtils.getLoggedInUser.mockReturnValue(createTestUser())
        platformClient.sdkMocks.organizations.list.mockResolvedValue(testOrgsList)
        orgsList = await user.listOrgs()
      })

      it('should pass token to sdk', async () => {
        expect(platformClient.sdkMocks.config).toHaveBeenCalledWith({ accessKey: createTestUser().idToken })
      })
      it('should pass username to sdk.orgs.list()', async () => {
        expect(platformClient.sdkMocks.organizations.list).toHaveBeenCalledWith({ username: createTestUser().username })
      })
      it('should return org list', async () => {
        expect(orgsList).toBe(testOrgsList)
      })
    })
  })

  describe('startLogin()', () => {
    let returnedLoginUrl
    beforeEach(async () => {
      platformClient.sdkMocks.login.mockResolvedValue({ loginUrl: platformLoginUrl })
      const user = new User()
      returnedLoginUrl = await user.startLogin()
    })
    it('should call sdk.login()', async () => {
      expect(platformClient.sdkMocks.login).toHaveBeenCalled()
    })

    it('should return cloud login url', async () => {
      expect(returnedLoginUrl).toBe(platformLoginUrl.replace('app', 'cloud'))
    })
  })

  describe('endLogin()', () => {
    let user
    let userUid = 'userUid'
    beforeEach(async () => {
      user = new User()
      request.mockResolvedValue({ userUid })
      user._loginData = Promise.resolve(createTestLoginData())
      await user.endLogin()
    })

    it('should get userUid', async () => {
      expect(request).toHaveBeenCalled()
    })

    it('should call config.set with correct data', async () => {
      const expectedSavedLoginData = {
        userId: userUid,
        users: {
          [userUid]: {
            userId: userUid,
            name: createTestLoginData().name,
            email: createTestLoginData().email,
            username: createTestLoginData().username,
            dashboard: {
              refreshToken: createTestLoginData().refreshToken,
              accessToken: createTestLoginData().accessToken,
              idToken: createTestLoginData().idToken,
              expiresAt: createTestLoginData().expiresAt,
              username: createTestLoginData().username
            }
          }
        }
      }
      expect(configUtils.set).toHaveBeenCalledWith(expectedSavedLoginData)
    })
  })

  describe('logout()', () => {
    it('should call sdk.logout()', async () => {
      const user = new User()
      user.logout()
      expect(accountUtils.logout).toHaveBeenCalled()
    })
  })
})
