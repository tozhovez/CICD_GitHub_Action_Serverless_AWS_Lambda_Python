'use strict'

const { EventEmitter } = require('events')
const { ServerlessSDK } = require('@serverless/platform-client')

class Platform extends EventEmitter {
  constructor({ accessKey } = {}) {
    super()
    this.sdk = new ServerlessSDK({ accessKey })
  }

  waitForEvent(type, timeout = 10000) {
    return Promise.race([
      new Promise((resolve, reject) => {
        if (type) {
          this.on('event', (event) => {
            if (event.event === type) {
              resolve(event)
            }
          })
        } else {
          this.once('event', resolve)
        }
        this.on('error', reject)
      }),
      new Promise((_resolve, reject) => {
        setTimeout(() => {
          reject(new Error('waitForEvent timed out'))
        }, timeout)
      })
    ])
  }

  async connect({ orgName, appName, instanceName }) {
    try {
      await this.sdk.connect({
        orgName,
        filter: { appName, instanceName, events: [] },
        onEvent: (event) => this.emit('event', event),
        // The following is NOT handling error event from our system.
        // It's handling error events when connecting to WS.
        // We don't want to reject and crash with those events.
        // We simply ignore them because WS automatically retries connecting on these errors.
        // This is essential when dev mode is on and left overnight
        // for example or when losing internet connection.
        // WS would then retry/reconnect without crashing the CLI
        onError: () => {}
      })
    } catch (error) {
      if (error.message.includes('401')) {
        error.message = `Your credentials do not have access to the Organization with the name of: ${orgName}.  Try logging into a different account.`
      }
      throw Error(error)
    }
  }

  disconnect() {
    this.removeAllListeners()
    this.sdk.disconnect()
  }
}

module.exports = Platform
