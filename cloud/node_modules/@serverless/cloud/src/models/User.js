'use strict'

const configUtils = require('@serverless/utils/config')
const accountUtils = require('@serverless/utils/account')
const { ServerlessSDK } = require('@serverless/platform-client')
const request = require('../utils/request')

const sleep = async (ms) => new Promise((res) => setTimeout(res, ms))

class User {
  constructor() {
    this.sdk = new ServerlessSDK()
    this.load()
  }

  load() {
    const user = configUtils.getLoggedInUser()

    if (!user) return

    this.userId = user.userId
    this.username = user.username
    this.refreshToken = user.refreshToken
    this.token = user.idToken
    this.accessKeys = user.accessKeys
  }

  isLoggedIn() {
    // First, check in memory...
    if (this._isValidUserIdSet()) {
      return true
    }

    // Then, check in file system...
    this.load()
    if (this._isValidUserIdSet()) {
      return true
    }

    return false
  }

  async getToken() {
    if (!this.isLoggedIn()) {
      return null
    }

    // refresh token if it's expired.
    // this platform-sdk method returns immediately if the idToken did not expire
    // if it did expire, it'll refresh it and update the config file
    await accountUtils.refreshToken(this.sdk)

    this.load()

    return this.token
  }

  async getDefaultOrgName() {
    if (!this.isLoggedIn()) {
      return null
    }

    const orgsList = await this.listOrgs()

    const defaultOrg = orgsList.find((org) => org.role === 'owner')

    return defaultOrg.orgName
  }

  async restoreOrgLogin(loginToken) {
    // the sf_ piece is trimmed on the frontend because
    // this is not the Serverless Framework. Here we put it back.
    const initTokenResult = await this.sdk.getInitToken(`sf_${loginToken}`)

    const userId = initTokenResult.userUid

    // The core platform does not return the refresh token
    // so we work around it by using the template object.
    //
    // I wish we could pass any data object, but unfortunatly
    // it was all designed previously around framework and components templates.
    const refreshToken = initTokenResult.template.commands[0]

    const loginDataToSaveInConfig = {
      userId,
      users: {
        [userId]: {
          userId,
          username: initTokenResult.userName,
          dashboard: {
            username: initTokenResult.userName,
            idToken: initTokenResult.idToken,
            refreshToken
          }
        }
      }
    }

    configUtils.set(loginDataToSaveInConfig)

    return initTokenResult.tenantName
  }

  async listOrgs() {
    if (!this.isLoggedIn()) {
      return null
    }

    this.sdk.config({ accessKey: await this.getToken() })
    return await this.sdk.organizations.list({ username: this.username })
  }

  async startLogin() {
    const { loginUrl, loginData } = await this.sdk.login() // eslint-disable-line

    // save the loginData promise to await it later
    this._loginData = loginData

    // use cloud.serverless.com instead of app.serverless.com
    const cloudLoginUrl = loginUrl.replace('app', 'cloud')

    return cloudLoginUrl
  }

  async endLogin() {
    // await the loginData promise, which resolves
    // after the user logs in
    const loginData = await this._loginData

    if (!loginData?.user_uid) {
      loginData.user_uid = await this._getUserUid(loginData.idToken)
    }

    const userId = loginData.user_uid

    const loginDataToSaveInConfig = {
      userId,
      users: {
        [userId]: {
          userId,
          name: loginData.name,
          email: loginData.email,
          username: loginData.username,
          dashboard: {
            refreshToken: loginData.refreshToken,
            accessToken: loginData.accessToken,
            idToken: loginData.idToken,
            expiresAt: loginData.expiresAt,
            username: loginData.username
          }
        }
      }
    }

    configUtils.set(loginDataToSaveInConfig)
  }

  logout() {
    return accountUtils.logout()
  }

  async _getUserUid(idToken) {
    let platformRoot =
      process.env.SERVERLESS_PLATFORM_STAGE === 'dev' ? `https://api.serverless-dev.com` : `https://api.serverless.com`

    const options = {
      accessKey: idToken,
      method: 'GET',
      root: platformRoot,
      endpoint: `/core/me`
    }

    const res = await request(options)

    if (!res?.userUid) {
      await sleep(1000)
      return await this._getUserUid(idToken)
    }

    return res.userUid
  }

  _isValidUserIdSet() {
    // todo the "github|" bit is temporary
    // to migrate users to our new auth handling
    if (this.userId && !this.userId.startsWith('github|')) {
      return true
    }
    return false
  }
}

module.exports = User
