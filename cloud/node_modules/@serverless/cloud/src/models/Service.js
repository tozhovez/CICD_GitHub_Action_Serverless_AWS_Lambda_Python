'use strict'

const request = require('../utils/request')

class Service {
  constructor(data = {}) {
    this.org = data.org
    this.serviceName = data.serviceName || 'default'

    this.dashboardUrl = `https://cloud.serverless.com/orgs/${this.org.orgName}/apps/${this.serviceName}`

    if (process.env.SERVERLESS_PLATFORM_STAGE !== 'prod') {
      this.dashboardUrl = `https://cloud.serverless-dev.com/orgs/${this.org.orgName}/apps/${this.serviceName}`
    }
  }

  async copy(data = {}) {
    const options = {
      accessKey: this.org.accessKey,
      method: 'POST',
      endpoint: `/orgs/${this.org.orgName}/services/${this.serviceName}/copy`,
      body: data
    }

    return await request(options)
  }

  async get(params = { anonymous: false }) {
    const options = {
      accessKey: params.anonymous ? undefined : this.org.accessKey,
      method: 'GET',
      endpoint: `/orgs/${this.org.orgName}/services/${this.serviceName}`
    }

    return await request(options)
  }

  async put(data = {}) {
    const options = {
      accessKey: this.org.accessKey,
      method: 'PATCH',
      endpoint: `/orgs/${this.org.orgName}/services/${this.serviceName}`,
      body: data
    }

    return await request(options)
  }

  async delete() {
    const options = {
      accessKey: this.org.accessKey,
      method: 'DELETE',
      endpoint: `/orgs/${this.org.orgName}/services/${this.serviceName}`
    }

    return await request(options)
  }

  async listInstances() {
    const options = {
      accessKey: this.org.accessKey,
      method: 'GET',
      endpoint: `/orgs/${this.org.orgName}/services/${this.serviceName}/instances`
    }

    return await request(options)
  }

  async getParams() {
    const options = {
      accessKey: this.org.accessKey,
      method: 'GET',
      endpoint: `/orgs/${this.org.orgName}/services/${this.serviceName}/params`
    }

    const { params } = await request(options)

    return params
  }

  async putParams(newParams) {
    const options = {
      accessKey: this.org.accessKey,
      method: 'PATCH',
      endpoint: `/orgs/${this.org.orgName}/services/${this.serviceName}/params`,
      body: { params: newParams }
    }

    const { params } = await request(options)

    return params
  }
}

module.exports = Service
