'use strict'

const isCI = require('../utils/isCI')
const Analytics = require('../models/Analytics')
const Code = require('../models/Code')
const FS = require('../models/FS')
const Instance = require('../models/Instance')
const Org = require('../models/Org')
const Platform = require('../models/Platform')
const Service = require('../models/Service')
const User = require('../models/User')

const login = require('./login')
const activate = require('./activate')

const outputInstanceLogs = require('../utils/outputInstanceLogs')
const outputTestResults = require('../utils/outputTestResults')

module.exports = async (cli) => {
  cli.viewSpinner('Loading')
  const user = new User()

  if (!user.isLoggedIn() && !isCI) {
    cli.logInfo('Please login to proceed.')
    await login(cli)
  }

  const fs = new FS({ user })
  await fs.read()

  if (!fs.serviceFile) {
    throw new Error(`You must be inside a Serverless Cloud app directory to run this command.`)
  }

  const orgName = cli.options.org || fs.serviceFile.serverless.org
  const serviceName = cli.options.service || fs.serviceFile.serverless.app || fs.serviceFile.serverless.service
  const instanceName = cli.isShellActive ? user.username : `test-${Math.random().toString(36).substr(2, 5)}`

  if (!orgName) {
    throw new Error(`Please specify a serverless org name in package.json or with the --org CLI param.`)
  }

  const org = new Org({ user, orgName })
  await org.authorize()

  if (!(await org.isActivated())) {
    if (isCI) {
      throw new Error(`Your org "${orgName}" is not activated for Serverless Cloud.`)
    }
    cli.logActivation(orgName)
    await activate(cli)
  }

  if (!cli.isShellActive) {
    cli.viewSpinner(`Starting test instance (${instanceName})`)
  }

  const service = new Service({ org, serviceName })

  const instance = new Instance({
    org,
    service,
    instanceType: 'test',
    instanceName
  })

  if (!cli.isShellActive) {
    const analytics = new Analytics({ org })
    const code = new Code({
      fs,
      org,
      service,
      instance,
      analytics
    })

    await code.init()
    await code.deploy()

    cli.logSuccess(`Test instance started: ${instance.url}`)
  }

  const platform = new Platform({ accessKey: org.accessKey })

  if (!cli.isShellActive) {
    platform.on('event', (event) => outputInstanceLogs(cli, event))
  }

  try {
    // TODO: this should have .catch  in case it throws while await platform.connect
    const promise = platform.waitForEvent('cloud.test.completed', 60000)

    await platform.connect({
      orgName: org.orgName,
      appName: service.serviceName,
      instanceName: instance.instanceName
    })

    cli.viewSpinner('Running tests')

    await instance.test()

    const event = await promise

    outputTestResults(cli, event)

    process.exitCode = event.data.object.results && event.data.object.results.success ? 0 : 1
  } catch (error) {
    console.log(error)
    cli.logError(error)
  }

  platform.disconnect()

  if (!cli.isShellActive) {
    cli.viewSpinner('Deleting instance')
    await instance.delete()
    cli.logSuccess('Test instance deleted')
    cli.log(`Exiting with status code ${process.exitCode}`)
  }
}
