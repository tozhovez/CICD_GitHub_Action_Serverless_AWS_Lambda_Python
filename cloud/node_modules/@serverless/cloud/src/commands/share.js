'use strict'

const FS = require('../models/FS')
const User = require('../models/User')
const Org = require('../models/Org')
const Service = require('../models/Service')
const Instance = require('../models/Instance')

const login = require('./login')
const activate = require('./activate')

module.exports = async (cli) => {
  cli.viewSpinner('Loading')
  const user = new User()

  if (!user.isLoggedIn()) {
    cli.logInfo('Please login to proceed.')
    await login(cli)
    user.load()
  }

  const fs = new FS({ user })
  await fs.read()

  if (!fs.serviceFile) {
    throw new Error(`You must be inside a Serverless Cloud app directory to run this command.`)
  }

  let shouldOverwrite = cli.options.overwrite || cli.options.o
  const sourceInstanceName = user.username
  const targetInstanceName = cli.args[0] || `${sourceInstanceName}-${Math.random().toString(36).substr(2, 5)}`

  const serviceName = cli.options.app || fs.serviceFile.serverless.app
  const orgName = cli.options.org || fs.serviceFile.serverless.org

  const org = new Org({ user, orgName })
  await org.authorize()

  if (!(await org.isActivated())) {
    cli.logActivation(orgName)
    await activate(cli)
  }

  const service = new Service({ org, serviceName })

  const instances = await service.listInstances()

  const existingInstance = instances.find((i) => i.instanceName === targetInstanceName)

  if (existingInstance && existingInstance.instanceType !== 'preview') {
    throw new Error(`You cannot overwrite an existing ${existingInstance.instanceType} instance.`)
  }

  if (existingInstance && !shouldOverwrite) {
    cli.logInfo(`This preview instance already exists. Are you sure you want to overwrite it?`)
    shouldOverwrite = await cli.confirm()

    if (!shouldOverwrite) {
      if (cli.isShellActive) {
        await cli.logError('Canceled')
        return
      } else {
        await cli.quit()
      }
    }
  }

  cli.viewSpinner('Sharing')

  if (sourceInstanceName !== targetInstanceName) {
    await service.copy({
      sourceInstanceName,
      targetInstanceName,
      copyCode: true,
      copyData: true,
      instanceType: 'preview'
    })
  }

  const instance = new Instance({
    org,
    service,
    instanceName: targetInstanceName
  })

  await instance.get()

  cli.logSuccess(`Successfully created preview intance "${targetInstanceName}".`)
  cli.logUrl(instance.url)
}
