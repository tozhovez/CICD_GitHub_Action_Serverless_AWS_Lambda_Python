'use strict'

const FS = require('../models/FS')
const Org = require('../models/Org')
const User = require('../models/User')
const Service = require('../models/Service')
const Instance = require('../models/Instance')
const Code = require('../models/Code')

const login = require('./login')
const activate = require('./activate')

module.exports = async (cli) => {
  let shouldOverwrite = cli.options.overwrite || cli.options.o
  let orgName = cli.options.org
  let instanceName = cli.options.instance || 'production'
  let [sourceOrgName, sourceServiceName] = cli.args[0].split('/')
  let serviceName = cli.options.app || sourceServiceName

  if (!sourceOrgName || !serviceName) {
    cli.logError(`Usage: cloud fork <org-name>/<app-name> (--instance <new-instance-name> --app <new-app-name>) `)
    return
  }

  cli.viewSpinner('Loading')

  const user = new User()

  if (!user.isLoggedIn()) {
    cli.logInfo('Please login to proceed.')
    await login(cli)
    user.load()
  }

  const fs = new FS({ user })

  if (!(await fs.isCwdEmpty()) && !shouldOverwrite) {
    cli.logInfo(`This directory is not empty. Are you sure you want to overwrite it?`)
    const shouldOverwrite = await cli.confirm()
    if (!shouldOverwrite) {
      await cli.quit()
    }
  }

  const selectOrg = async () => {
    cli.viewSpinner('Loading')
    const orgsList = (await user.listOrgs()).map((org) => org.orgName)

    if (orgsList.length > 1) {
      cli.logInfo('Please select an organization to proceed.')
      orgName = await cli.select(orgsList)
    } else {
      orgName = orgsList[0]
    }

    return orgName
  }

  if (!orgName) {
    orgName = await selectOrg()
  }

  cli.viewSpinner('Loading')

  const org = new Org({ user, orgName })

  if (!(await org.isAuthorized())) {
    cli.logError(`You don't have access to the "${orgName}" org. Please enter a different org name.`)
    return await selectOrg()
  }

  if (!(await org.isActivated())) {
    cli.logActivation(orgName)
    await activate(cli)
  }

  cli.viewSpinner(`Forking ${sourceOrgName}/${sourceServiceName} => ${orgName}/${serviceName}`)

  const service = new Service({ org, serviceName })

  await service.copy({
    sourceOrgName,
    sourceServiceName,
    sourceInstanceName: instanceName,
    serviceName,
    targetInstanceName: instanceName,
    copyCode: true,
    copyData: false,
    instanceType: 'stage'
  })

  const instance = new Instance({
    org,
    service,
    instanceName
  })

  const code = new Code({
    fs,
    org,
    service,
    instance
  })

  await fs.emptyDir()
  await code.getUrls()
  await code.downloadSource()
  await fs.readServiceFileIfExists()
  await fs.writeServiceFile({ serviceName, orgName })

  cli.logSuccess(`Successfully forked "${sourceOrgName}/${serviceName}"`)
}
