'use strict'

const isCI = require('../utils/isCI')
const FS = require('../models/FS')
const User = require('../models/User')
const Org = require('../models/Org')
const Service = require('../models/Service')

const login = require('./login')
const activate = require('./activate')

module.exports = async (cli) => {
  cli.viewSpinner('Loading')
  const user = new User()

  if (!user.isLoggedIn() && !isCI) {
    cli.logInfo('Please login to proceed.')
    await login(cli)
    user.load()
  }

  const fs = new FS({ user })
  await fs.read()

  if (!fs.serviceFile) {
    throw new Error(`You must be inside a Serverless Cloud app directory to run this command.`)
  }

  const serviceName = cli.options.app || fs.serviceFile.serverless.app
  const orgName = cli.options.org || fs.serviceFile.serverless.org

  if (!orgName) {
    throw new Error(`Please specify a serverless org name in package.json or with the --org CLI param.`)
  }

  const org = new Org({ user, orgName })
  await org.authorize()

  if (!(await org.isActivated())) {
    if (isCI) {
      throw new Error(`Your org "${orgName}" is not activated for Serverless Cloud.`)
    }
    cli.logActivation(orgName)
    await activate(cli)
  }

  const service = new Service({ org, serviceName })
  const instances = await service.listInstances()

  let sourceInstanceName = cli.args[0]
  let targetInstanceName = cli.args[1]

  if (!sourceInstanceName) {
    if (isCI) {
      throw new Error(`Please specify a source stage name: "cloud promote dev"`)
    }

    cli.logInfo(`Please enter the name of the stage you want to promote.`)
    sourceInstanceName = await cli.prompt(`type a stage name`)
  }

  if (!targetInstanceName) {
    if (isCI) {
      throw new Error(`Please specify a target stage name: "cloud promote dev prod"`)
    }

    cli.logInfo(`Please enter the name of the stage you want to promote to.`)
    targetInstanceName = await cli.prompt(`type a stage name`)
  }

  if (sourceInstanceName === targetInstanceName) {
    throw new Error(`The stage names you specified are identical. Please specify two different stages.`)
  }

  const existingSourceInstance = instances.find((i) => i.instanceName === targetInstanceName)
  const existingTargetInstance = instances.find((i) => i.instanceName === sourceInstanceName)

  if (
    (existingSourceInstance && existingSourceInstance.instanceType !== 'stage') ||
    (existingTargetInstance && existingTargetInstance.instanceType !== 'stage')
  ) {
    throw new Error(
      `One of the instances you specified are not of type "stage". You can only promote between stage instances.`
    )
  }

  cli.viewSpinner('Promoting')

  if (sourceInstanceName !== targetInstanceName) {
    await service.copy({
      sourceInstanceName,
      targetInstanceName,
      copyCode: true,
      copyData: false,
      instanceType: 'stage'
    })
  }

  cli.logSuccess(`Successfully promoted from the "${sourceInstanceName}" stage to the "${targetInstanceName}" stage.`)
}
