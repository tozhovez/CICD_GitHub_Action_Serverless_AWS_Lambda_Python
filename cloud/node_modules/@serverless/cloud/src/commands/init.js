'use strict'

const FS = require('../models/FS')
const Org = require('../models/Org')
const User = require('../models/User')
const Analytics = require('../models/Analytics')

const login = require('./login')
const activate = require('./activate')
const clone = require('./clone')

const trySendAnalytics = async () => {
  try {
    const user = new User()
    const org = new Org({ user })
    await org.authorize()

    if (org.accessKey && org.orgName) {
      const analytics = new Analytics({ org })
      analytics.publish('cloud.dev.initiated', {}).catch(() => {})
    }
  } catch (e) {
    if (process.env.SLS_DEBUG) {
      console.error(e)
    }
  }
}

module.exports = async (cli) => {
  cli.viewSpinner('Loading')

  const user = new User()

  if (!user.isLoggedIn()) {
    cli.logInfo('Please login to proceed.')
    await login(cli)
    user.load()
  }

  const fs = new FS({ user })

  let shouldOverwrite = cli.options.overwrite || cli.options.o
  let orgName = cli.options.org
  let serviceName = cli.options.app
  let templateName = cli.options.template

  if (!(await fs.isCwdEmpty()) && !shouldOverwrite) {
    cli.logInfo(`This directory is not empty. Are you sure you want to overwrite it?`)
    const shouldOverwrite = await cli.confirm()
    if (!shouldOverwrite) {
      await cli.quit()
    }
  }

  const selectOrg = async () => {
    cli.viewSpinner('Loading')
    let orgsList = (await user.listOrgs()).map((org) => org.orgName)

    if (orgsList.length > 1) {
      cli.logInfo('Please select an organization to proceed.')
      orgName = await cli.select(orgsList)
    } else {
      orgName = orgsList[0]
    }

    return orgName
  }

  if (!orgName) {
    orgName = await selectOrg()
  }

  cli.viewSpinner('Loading')

  const org = new Org({ user, orgName })

  if (!(await org.isAuthorized())) {
    cli.logError(`You don't have access to the "${orgName}" org. Please enter a different org name.`)
    return await selectOrg()
  }

  if (!(await org.isActivated())) {
    cli.logActivation(orgName)
    await activate(cli)
  }

  let shouldCreate
  let shouldClone
  if (!serviceName) {
    cli.viewSpinner(`Loading`)
    let existingServicesNames = (await org.listServices()).map((service) => service.serviceName)

    if (existingServicesNames.length === 0) {
      shouldCreate = true
    } else {
      cli.logQuestion('Do you want to create a new app or work on an existing one?')

      const selectItems = ['Create new app', 'Work on an existing app']
      const answer = await cli.select(selectItems)
      if (answer === selectItems[0]) {
        shouldCreate = true
      } else {
        shouldClone = true
      }
    }

    if (shouldCreate) {
      const promptForServiceName = async () => {
        const specifiedServiceName = await cli.prompt('type an app name')

        if (!specifiedServiceName.match(/^[a-z0-9-]+$/)) {
          cli.logError('App name must consist only of lowercase characters and hyphens. Please try again.')
          return await promptForServiceName()
        }

        return specifiedServiceName
      }

      if (!templateName) {
        cli.viewSpinner('Loading')
        const coreTemplates = await fs.listCoreTemplates()
        cli.logInfo('Please choose an app template to generate in this directory.')
        const selectedTemplate = await cli.select(coreTemplates)
        templateName = selectedTemplate.name
      }

      cli.logInfo('Please enter a name for your new app.')
      serviceName = await promptForServiceName()

      cli.viewSpinner('Generating and installing dependencies')

      await fs.initService({ orgName, serviceName, templateName })

      await trySendAnalytics()

      cli.logSuccess(`Successfully generated app "${serviceName}" in this directory.`)
    }

    if (shouldClone) {
      cli.options.org = orgName
      cli.options.overwrite = shouldOverwrite
      cli.options.dir = false
      return await clone(cli)
    }
  }
}
