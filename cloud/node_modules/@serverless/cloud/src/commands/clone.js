'use strict'

const FS = require('../models/FS')
const User = require('../models/User')
const Org = require('../models/Org')
const Service = require('../models/Service')
const Instance = require('../models/Instance')
const Code = require('../models/Code')

const login = require('./login')
const activate = require('./activate')
const parseSlug = require('../utils/parseSlug')

const clone = async (cli) => {
  cli.viewSpinner('Loading')

  let { orgName, serviceName, instanceName } = parseSlug(cli.args[0])

  orgName = orgName || cli.options.org
  serviceName = serviceName || cli.options.app
  instanceName = instanceName || cli.options.instance

  let shouldCreateDir = cli.options.dir === false ? false : true
  const loginToken = cli.options.login

  const user = new User()

  if (loginToken) {
    orgName = await user.restoreOrgLogin(loginToken)
    cli.logSuccess('Successfully logged in.')
  }

  const fs = new FS({ user })

  await fs.read()

  if (fs.serviceFile) {
    serviceName = serviceName || fs.serviceFile.serverless.app
    orgName = orgName || fs.serviceFile.serverless.org
    shouldCreateDir = false
  }

  if (!user.isLoggedIn()) {
    cli.logInfo('Please login to proceed.')
    await login(cli)
    user.load()
  }

  let shouldOverwrite = cli.options.overwrite || cli.options.o

  if (!shouldCreateDir && !(await fs.isCwdEmpty()) && !shouldOverwrite) {
    cli.logInfo(`This directory is not empty. Are you sure you want to overwrite it?`)
    shouldOverwrite = await cli.confirm()

    if (!shouldOverwrite) {
      await cli.quit()
    }
  }

  cli.viewSpinner('Loading')

  const selectOrg = async () => {
    cli.viewSpinner('Loading')
    const orgsList = (await user.listOrgs()).map((org) => org.orgName)

    if (orgsList.length > 1) {
      cli.logInfo('Please select an organization to proceed.')
      orgName = await cli.select(orgsList)
    } else {
      orgName = orgsList[0]
    }

    return orgName
  }

  if (!orgName) {
    orgName = await selectOrg()
  }

  cli.viewSpinner('Loading')

  const org = new Org({ user, orgName })

  if (!(await org.isAuthorized())) {
    cli.logError(`You don't have access to the "${orgName}" org. Please enter a different org name.`)
    return await selectOrg()
  }

  if (!(await org.isActivated())) {
    cli.logActivation(orgName)
    await activate(cli)
  }

  if (!serviceName) {
    cli.viewSpinner('Loading')
    const servicesList = (await org.listServicesWithInstances()).map((service) => service.serviceName)

    if (servicesList.length > 1) {
      cli.logQuestion('Which app do you want to clone?')
      serviceName = await cli.select(servicesList)
    } else {
      serviceName = servicesList[0]
    }
  }

  const service = new Service({ org, serviceName })

  const selectInstance = async () => {
    cli.viewSpinner('Loading')
    const instancesList = (await service.listInstances()).map((instance) => instance.instanceName)

    if (instancesList.length > 1) {
      cli.logQuestion(`Which instance of the ${serviceName} app do you want to clone?`)
      instanceName = await cli.select(instancesList)
    } else {
      instanceName = instancesList[0]
    }

    return instanceName
  }

  if (!instanceName) {
    instanceName = await selectInstance()
  }

  const sourceInstanceName = instanceName
  const targetInstanceName = user.username

  if (shouldCreateDir) {
    fs.createServiceDir(serviceName)
  }

  cli.viewSpinner(`Cloning`)

  if (sourceInstanceName !== targetInstanceName) {
    await service.copy({
      sourceInstanceName,
      targetInstanceName: targetInstanceName,
      copyCode: true,
      copyData: true,
      overwrite: shouldOverwrite,
      instanceType: 'personal'
    })
  }

  const instance = new Instance({
    org,
    service,
    instanceName: targetInstanceName
  })

  const code = new Code({
    fs,
    org,
    service,
    instance
  })

  await fs.emptyDir()
  try {
    await code.getUrls()
    await code.downloadSource()
  } catch (e) {
    if (e.message.includes('404')) {
      cli.logError(
        `The ${instanceName} instance you specified is empty and does not contain any code. Please try again.`
      )
      cli.options.org = orgName
      return await clone(cli)
    }
    throw e
  }

  await fs.readServiceFileIfExists()
  await fs.writeServiceFile({ serviceName, orgName })

  cli.viewSpinner('Installing dependencies')
  await fs.installDependenciesIfExists()

  cli.logSuccess(`Successfully cloned instance "${sourceInstanceName}"`)

  if (shouldCreateDir) {
    cli.logSuccess(`Please cd into the "${serviceName}" directory and run "cloud" to start developing.`)
  }
}

module.exports = clone
