'use strict'

const https = require('https')
const Axios = require('axios')
const axiosRetry = require('axios-retry')

const { version } = require('../../package.json')

const httpsAgent = new https.Agent({ keepAlive: true })

const axios = Axios.create({
  httpsAgent
})

axiosRetry(axios, {
  retries: 10,
  retryDelay: axiosRetry.exponentialDelay,
  retryCondition: (error) => {
    const status = (error.response && error.response.status) || 'unknown'
    const message = (error.response && error.response.data && error.response.data.message) || 'unknown'

    const retryable =
      axiosRetry.isNetworkOrIdempotentRequestError(error) ||
      status === 429 || // Too many requests = API gateway throttling
      status === 503 // Service Unavailable = Lambda throttling

    if (retryable) {
      console.log(`Received error status ${status}, message ${message}, retrying...`)
    }

    return retryable
  }
})

axios.defaults.headers.common = {}
axios.defaults.headers.put = {}
axios.defaults.headers.get = {}

module.exports = async (options = {}) => {
  const root = options.root || process.env.SERVERLESS_CLOUD_ENDPOINT

  const { accessKey, method = 'POST', params, headers = {}, body, endpoint } = options
  const { url = `${root}${endpoint}` } = options

  if (accessKey) {
    headers.Authorization = `Bearer ${accessKey}`
  }

  // only set this content type for API endpoints
  if (body && endpoint) {
    headers['Content-Type'] = 'application/json'
  }

  if (endpoint) {
    headers['User-Agent'] = `cli/${version}`
  }

  const requestOptions = {
    url,
    method,
    headers,
    params,
    data: body,
    maxContentLength: Infinity,
    maxBodyLength: Infinity
  }

  try {
    const res = await axios(requestOptions)
    return res.data
  } catch (error) {
    if (error.response && error.response.data) {
      const err = new Error(error.response.data.message)
      err.statusCode = error.response.data.statusCode || error.response.status || null
      err.name = error.response.data.name || null
      throw err
    }

    throw error
  }
}
