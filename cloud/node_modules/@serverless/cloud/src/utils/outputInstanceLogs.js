const parseLog = require('./parseLog')

const shouldFilterLog = (text) => {
  try {
    const obj = JSON.parse(text)

    if (obj._slsLog) {
      return true
    }
  } catch (e) {
    return false
  }

  return false
}

module.exports = (cli, event) => {
  if (event.event === 'instance.logs') {
    if (event.data.logs && Array.isArray(event.data.logs)) {
      event.data.logs.forEach((log) => {
        // Generate local timestamp from log
        const timestamp = cli.styles.dim(
          `${new Date(log.createdAt).toLocaleTimeString([], { hour12: false })} ${cli.icons.line} `
        )

        const text = parseLog(log.data)

        // Filter out our core logs (ie. those from serverless data)
        if (shouldFilterLog(text)) {
          return
        }

        if (log.type === 'warn') {
          cli.log(timestamp + cli.styles.grey(text))
        } else if (log.type === 'error') {
          cli.log(timestamp + cli.styles.red(text))
        } else {
          cli.log(timestamp + text)
        }
      })
    }
  } else if (event.event === 'cloud.test.log') {
    const { type, message, createdAt } = event.data.object

    const text = parseLog(message)

    // Filter out our core logs (ie. those from serverless data)
    if (shouldFilterLog(text)) {
      return
    }

    const timestamp = createdAt
      ? cli.styles.dim(`${new Date(createdAt).toLocaleTimeString([], { hour12: false })} ${cli.icons.line} `)
      : ''

    if (type === 'warn') {
      cli.log(timestamp + cli.styles.grey(message))
    } else if (type === 'error') {
      cli.log(timestamp + cli.styles.red(message))
    } else {
      cli.log(timestamp + message)
    }
  }
}
